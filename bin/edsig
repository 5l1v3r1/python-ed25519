#! /usr/bin/python

import os, sys
from binascii import hexlify, unhexlify
import ed25519
from hashlib import sha256

def help():
    print """\
Usage: (ed25519 version %s)

 edsig generate [STEM]
   creates keypair, writes to 'STEM.signing.key' and 'STEM.verifying.key'
   default is to 'signing.key' and 'verifying.key'

 edsig sign (signing.key|keyfile) message.file
   prints signature to stdout
   If message.file is "-", reads from stdin.

 edsig verify (verifying.key|keyfile) message.file (signature|sigfile)
   prints 'good signature!' or raises exception
   If message.file is "-", reads from stdin.

Key-providing arguments can either be the key itself, or point to a file
containing the key.
""" % ed25519.__version__

def remove_prefix(prefix, s):
    if not s.startswith(prefix):
        raise ValueError("no prefix found")
    return s[len(prefix):]

def data_from_arg(arg, prefix, keylen, readable):
    if (readable
        and arg.startswith(prefix)
        and len(remove_prefix(prefix, arg))==keylen):
        return arg
    if os.path.isfile(arg):
        return open(arg,"r").read()
    raise ValueError("unable to get data from '%s'" % arg)

def message_rep(msg_arg):
    if msg_arg == "-":
        f = sys.stdin
    else:
        f = open(msg_arg, "rb")
    h = sha256()
    while True:
        data = f.read(16*1024)
        if not data:
            break
        h.update(data)
    return h.digest()

if len(sys.argv) < 2:
    help()
elif sys.argv[1] == "generate":
    sk_bytes = os.urandom(32)
    sk = ed25519.SigningKey(sk_bytes)
    vk_bytes = sk.get_verifying_key_bytes()
    if len(sys.argv) > 2:
        sk_outfile = sys.argv[2]+".signing.key"
        vk_outfile = sys.argv[2]+".verifying.key"
    else:
        sk_outfile = "signing.key"
        vk_outfile = "verifying.key"
    vk_s = "verf0-"+hexlify(vk_bytes)
    open(sk_outfile,"w").write("sign0-"+sk_bytes)
    open(vk_outfile,"w").write(vk_s+"\n")
    print "wrote private signing key to", sk_outfile
    print "write public verifying key to", vk_outfile
elif sys.argv[1] == "sign":
    sk_arg = sys.argv[2]
    msg_arg = sys.argv[3]
    sk_s = data_from_arg(sk_arg, "sign0-", 64, False)
    sk = ed25519.SigningKey(remove_prefix("sign0-", sk_s))
    sig = "sig0-"+hexlify(sk.sign(message_rep(msg_arg)))
    print sig
elif sys.argv[1] == "verify":
    vk_arg = sys.argv[2]
    msg_arg = sys.argv[3]
    sig_arg = sys.argv[4]
    vk_s = data_from_arg(vk_arg, "verf0-", 64, True).strip()
    vk_bytes = unhexlify(remove_prefix("verf0-", vk_s))
    vk = ed25519.VerifyingKey(vk_bytes)
    sig_s = data_from_arg(sig_arg, "sig0-", 128, True).strip()
    sig_bytes = unhexlify(remove_prefix("sig0-", sig_s))
    vk.verify(sig_bytes, message_rep(msg_arg)) # could raise BadSignature
    print "good signature!"
else:
    help()
